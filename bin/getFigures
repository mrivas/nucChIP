#!/usr/bin/env python
import argparse, sys, pysam, HTSeq, numpy, cPickle
import nucChIP

############################################################
def getParser():
	parser = argparse.ArgumentParser(description='Generate coverage figures.')
	parser.add_argument('-b',type=str,dest="bFile",help="BAM file.")
	parser.add_argument('-n',type=str,dest="nFile",help="BED file with nucleosome positions.")
	parser.add_argument('-f',type=int,dest="fragL",help="Fragment length if single-end library. If library is paired-end, provide 0 as fragment length.")
	parser.add_argument('-hr',type=int,dest="halfR",help="Half length of reads extended at their midpoint.")
	parser.add_argument('-hw',type=int,dest="halfW",help="Half length of the windows.")
	parser.add_argument('-o',type=str,dest="oFile",help="Output file.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
############################################################
def main():
	args = getParser().parse_args()
	bamName = args.bFile
	nuclFile = args.nFile
	fragLength  = args.fragL
	halfRead  = args.halfR
	halfwin  = args.halW
	oFile = args.oFile

	#bamName = "/data2/rivasas2/singleNucleosome/enriched_histones/secondBatch/pooled/all_H3K27Ac_d0.sortedByName.bam"
	#nuclFile = "/data2/rivasas2/singleNucleosome/enriched_histones/secondBatch/pooled/H3K27Ac_enriched.bed"
	#fragLength  = 150
	#halfRead  = 74
	#halfwin  = 3000
	#out = "test"

	bamFile = HTSeq.BAM_Reader(bamName)

	print "Getting library size"
	#libSize=nucChIP.getLibSize(bamName)
	libSize=20000000
	print "Getting nucleosomes"
	nucl_ivs = nucChIP.getNuclIV(nuclFile,halfwin)
	print "Getting average read length"
	if fragLength!=0: # if single-end
		avrLength = fragLength
	else:
		avrLength =  nucChIP.getAvrLength(bamFile)
	print avrLength
	print "Producing coverage"
	coverage = nucChIP.getFullCoverage(avrLength,bamFile,halfRead)
	print "Producing average and matrix profiles"
	average,matrix = nucChIP.getProfiles(coverage,halfwin,nucl_ivs,libSize)
	print "Plotting results"
	#nucChIP.getPlots(out,average,matrix,halfwin)
	print "Saving results to output file"
	outFile=open(out+".cpickle",'wb')
	cPickle.dump(obj,outFile)
	outFile.close()
	##To load the objects:
	#outFile=file(out+".cpickle","rb")
	#loaded_obj=[]
	#for i in range(1):
	#	loaded_objects.append(cPickle,load(f) )
	#f.close()
############################################################
if __name__ == '__main__':
	main()
