#!/usr/bin/env python
import argparse, sys, HTSeq 

###########################################################
def getParser():
	parser = argparse.ArgumentParser(description='Generate coverage plots.')
	parser.add_argument('-gtf'   , type=str,   dest="gtfFile",help="STR. Name of GTF file.")
	parser.add_argument('-exp'   , type=str,   dest="expFile",help="STR. Name of gene expression file.")
	parser.add_argument('-out'   , type=str,   dest="outFile",help="STR. Name of output file.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
###########################################################
def main():
	args    = getParser().parse_args()
	gtfFile = args.gtfFile
	expFile = args.expFile
	outFile = args.outFile    


	##############################################
	# Get gene expression
	nLine=0
	gene_exps={}
	for line in open(expFile,"r"):
		line=line.strip().split("\t")
		if nLine == 0:
			nLine += 1
			continue
		gene_id, fpkm = line[0],line[5]
		gene_exps[gene_id]=fpkm
	##############################################
	# Get non-redudant exons per gene
	gtf_file = HTSeq.GFF_Reader( gtfFile )
	transcript_id="dummy" # dummy initialization
	nrExons={}
	exons=[]
	for feature in gtf_file:
		if feature.type != "exon": continue
		if feature.attr["transcript_id"] != transcript_id:
			if len(exons)>2:
				if not feature.attr["gene_id"] in nrExons:
					nrExons[gene_id]=set()
				for exon in exons[1:-1]: # skip first and last exons
					nrExons[gene_id].add(exon) # non redundant set of exons
			transcript_id = feature.attr["transcript_id"]
			gene_id = feature.attr["gene_id"]
			exons = [feature.iv]
		else:
			exons.append(feature.iv)
	# Add left-overs
	if not gene_id in nrExons:
		nrExons[gene_id]=set()
	if len(exons)>2:
		for exon in exons[1:-1]: # skip first and last exons
			nrExons[feature.attr["gene_id"]].add(exon) # non redundant set of exons
	##############################################
	# Print results
	out=open(outFile,'w')
	for gene_id in nrExons:
		for exon in nrExons[gene_id]:
			if not gene_id in gene_exps:
				continue
			else:
				gene_exp = gene_exps[gene_id]
			print >>out, "\t".join(map(str,[exon.chrom,exon.start,exon.end,gene_id,gene_exp,exon.strand]))
	out.close()
################################################################
if __name__ == '__main__':
    main()

