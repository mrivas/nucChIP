#!/usr/bin/env python
import argparse, sys, HTSeq, numpy, pysam, matplotlib, itertools, nucChIP
matplotlib.use('Agg')
from matplotlib import pyplot
from scipy import stats
from scipy.cluster.vq import kmeans2
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib import gridspec
#from scipy.interpolate import interp1d
from scipy import signal
from scipy.signal import argrelmax

###########################################################
def getParser():
    parser = argparse.ArgumentParser(description='Generate coverage plots.')
    parser.add_argument('-gtf'   , type=str,   dest="gtfFile",help="STR. Name of configuration file.")
    parser.add_argument('-out'   , type=str,   dest="outFile",help="STR. Name of outputconfiguration file.")

    if len(sys.argv) == 1:
        print >> sys.stderr,parser.print_help()
        exit(0)
    return parser
###########################################################
def main():
    args    = getParser().parse_args()
    gtfFile = args.gtfFile
	outFile = args.outFile    

	gtf_file = HTSeq.GFF_Reader( gtfFile )

	out=open(outFile,'w')
	transcript_id="dummy"
	exons=[]
	for feature in gtf_file:
		if feature.attr["transcript_id"] != transcript_id:
			if len(exons)>2:
				for exon in exons[1:-1]: # skip first and last exons
					print >>out, "\t".join(map(str,[exon.chrom,exon.start,exon.end,exon.strand]))
			transcript_id = feature.attr["transcript_id"]
			exons=[]
		elif feature.type == "exon":
			exons.append(feature.iv)
	out.close()
################################################################
if __name__ == '__main__':
    main()

