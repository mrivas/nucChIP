#!/usr/bin/env python
import argparse, sys, numpy, itertools, matplotlib, HTSeq
matplotlib.use('Agg')
from matplotlib_venn import venn2, venn2_circles
import matplotlib as mpl
import matplotlib.cm as cm
from matplotlib import pyplot
from matplotlib import gridspec
from scipy.stats import binom_test
###########################################################
def getParser():
	parser = argparse.ArgumentParser(description='Compute the number of enriched regions between two files.')
	parser.add_argument('-conf',type=str,dest="conf",help="TXT file. Configuration file.")
	parser.add_argument('-control',type=str,dest="control",help="bed file. control counts.")
	parser.add_argument('-restrict',type=str,dest="restrict",help="bed file. Restrict analysis to regions where the 11th column of this file is equal to 0. Default=none.",default="none")
	parser.add_argument('-pvalue',type=float,dest="pvalue",help="FLOAT. P-value cut-off. Default: 1",default=1.0)
	parser.add_argument('-prefix',type=str,dest="prefix",help="STR. Prefix of output file.")
	
	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
##########################################################
def getMacsPeaks(macsFile):
	macs_peaks = HTSeq.GenomicArrayOfSets( "auto", stranded=False )
	for line in open(macsFile,"r"):
		line = line.strip().split("\t")
		peak_iv = HTSeq.GenomicInterval( line[0], int(line[1]), int(line[2]) )
		macs_peaks[ peak_iv ] += "macs_peak"
	return macs_peaks
##########################################################
def getUpper( upperFile ):
	upper = {}
	for row,line in enumerate(open(upperFile,"r")):
		if row==0: continue #skip header
		n,mu,upper_value = line.strip().split("\t")[0:3]
		upper[int(n)] = int(upper_value)
	return upper
#################################################################
def getNetProb(casesMatrix,case,probs):
	nCols=probs.shape[1]
	rows=( numpy.sum(casesMatrix*case==case,axis=1 )==nCols )	
	subMatrix = casesMatrix[rows,:]
	
	signs = pow(-1,numpy.sum( subMatrix, axis=1)%2)
	net_probs = []
	for i in range(subMatrix.shape[0]):
		row=subMatrix[i,:]
		net_prob = numpy.product( (row*probs)[0][row!=0]  )
		net_probs.append( net_prob )
	net_prob = numpy.sum(net_probs*signs)
	return abs(net_prob)
###########################################################
def main():
	args = getParser().parse_args()
	confFile    = args.conf
	controlFile = args.control
	restrictFile = args.restrict
	pvalue      = args.pvalue
	prefix  = args.prefix
	####################################################
	# Excecution
	nCols=0
	for line in open(confFile,"r"): nCols+=1
	
	if restrictFile!="none":
		restrict=[]
		restrict_count=0
		for line in open(restrictFile,"r"): 
			line = line.strip().split("\t")
			if float(line[8])<-numpy.log10(pvalue): continue
			if int(line[10])==0:
				restrict.append(False)
				restrict_count += 1
			else:
				restrict.append(True)
	
	control_counts, coords = [], []
	nRows,idx = 0,-1
	for nLine,line in enumerate(open(controlFile,"r")): 
		line = line.strip().split("\t")
		if nLine==0: continue # skip header line
		if float(line[8])<-numpy.log10(pvalue): continue
		idx += 1
		if restrictFile != "none":
			if restrict[idx]: continue 
		control_count=int( line[-1] )
		control_counts.append(control_count)
		
		coord = "_".join(map( str,line[0:3] ))
		coords.append(coord)
		nRows += 1
  
  	if restrictFile != "none":
		if nRows != restrict_count: 
			print "Number of restricting sites not equal the number of rows of matrix"
			print nRows, restrict_count
			exit(0)

	enrichmentMatrix=numpy.zeros((nRows,nCols))
	pvalues=[]
	
	names = []
	nFiles = 0
	for col, line in enumerate(open(confFile,"r")):
		line = line.strip().split("\t")
		signalFile = line[0]
		upperFile   = line[1]
		names.append( line[2] )
		nFiles += 1
		# Check if there is a MACS peak file
		if len(line)==4:
			macsFile = line[1]
			macs_peaks=getMacsPeaks(macsFile)
		else:
			upper = getUpper(upperFile)
			
		row,idx = 0,-1
		for nLine,sLine in enumerate(open(signalFile,"r")):
			sLine = sLine.strip().split("\t")
			if nLine==0: continue # skip header line
			if float(sLine[8])<-numpy.log10(pvalue): continue
			idx += 1
			if restrictFile != "none":
				if restrict[idx]: continue 
			row += 1
		
			pvalues.append( float(sLine[8]) )

			if len(line)==4: # there is a MACS peak file
				nuc_iv = HTSeq.GenomicInterval(sLine[0],int(sLine[1]),int(sLine[2]))
				for iv,val in macs_peaks[nuc_iv].steps():
					if len(val)>0:
						enrichmentMatrix[row-1,col]=1
						continue
			else: 
				s=sLine[-1]
				if not control_counts[row-1] in upper: continue # skip outlier
				if int(s) >= upper[control_counts[row-1]]:
					enrichmentMatrix[row-1,col]=1
		if row!=nRows:
			print "Different number of rows between control and "+signalFile
		if restrictFile != "none":
			if row != restrict_count: 
				print "Number of restricting sites not equal the number of rows on signal file"
				print row, restrict_count
				exit(0)

	#################################################3
	# Compute overlaps
	cases = list(itertools.product([0, 1], repeat=nCols))	
	casesMatrix=numpy.zeros( (pow(2,nCols),nCols) )
	idx=numpy.argsort(numpy.sum(cases,axis=1))
	for row,i in enumerate(idx):
		casesMatrix[row,:]=cases[i]
	sequence = []
	for i in range(nCols):
		sequence.append( pow(2,i+1) )
	sequence = numpy.array(sequence)
	# Save results to file
	flag_counts,pvalues_counts={},{}
	out=open(prefix+".pvalue_"+str(pvalue)+".enrichment_flags.bed","w")
	for row in range(nRows):
		flag   = sum( pow( sequence, enrichmentMatrix[row,:] ) )
		
		if flag in pvalues_counts:
			pvalues_counts[ flag ] += [ pvalues[row] ]
		else:
			pvalues_counts[ flag ] = [ pvalues[row] ]

		if flag in flag_counts:
			flag_counts[ flag ] += 1
		else:
			flag_counts[ flag ] = 1
		output = coords[row].split("_")
		output += [ flag ]
		print >>out, "\t".join(map(str,output))
	out.close()
	# Get probabilities and total counts
	all_counts=[]
	for row in range( pow(2,nCols) ):
		flag   = sum( pow( sequence, casesMatrix[row,:] ) )
		all_counts.append(flag_counts[flag])
	probs = numpy.array( numpy.matrix(all_counts) * casesMatrix )
	total_counts = sum(all_counts)
	probs = probs/ total_counts
	# Save cases explanation and summary
	out=open(prefix+".pvalue_"+str(pvalue)+".flags_summary.bed","w")
	header = names
	header += ["flag","Counts","Random_counts","Avr_pvalues","-log10_enrich_pvalue"]
	print >>out, "\t".join(map(str,header))
	counts,ratios=[],[]
	for row in range( pow(2,nCols) ):
		case = casesMatrix[row,:]
		flag   = sum( pow( sequence, case ) )
		net_prob = getNetProb(casesMatrix,case,probs)
		random_count = total_counts*net_prob
		#pvalues
		pvalueBin=-numpy.log10(binom_test(flag_counts[flag],total_counts,net_prob))
		
		output = list(case)
		output += [flag, flag_counts[flag],random_count,numpy.mean(pvalues_counts[flag]) ,pvalueBin]
		print >>out, "\t".join(map(str,output))
		counts.append(flag_counts[flag])
		ratios.append(numpy.log(flag_counts[flag]/random_count))
	out.close()
	
	#################################################
	# Plot counts bar plot
	# Create a figure.
	fig = pyplot.figure(figsize=(6, 6))
	gs = gridspec.GridSpec(2, 1, height_ratios=[3,1])
	
	# barplot
	ax = pyplot.subplot(gs[0])
	#ax = fig.add_subplot(211)
	ax.bar( numpy.array(range(len(counts[1:])))+0.5, counts[1:],align="center")
	ax.set_xlim(0, len(counts[1:]))
	ax.grid(True)
	ax.tick_params( axis='x', which='both',	bottom='off', top='off', labelbottom='off')
	ax.set_ylabel("Count of co-localized histone marks") 
	ax.text(0.5,0.9,"Number of empty nucleosomes = "+str('%.2E' % counts[0]),horizontalalignment='center',verticalalignment='center',transform=ax.transAxes) 
	# Axes for the heatmap triangle.
	ax = pyplot.subplot(gs[1])
	#ax = fig.add_subplot(212,frame_on=True)
	ax.set_xticks([])
	pyplot.setp(ax,yticks=numpy.arange(0,8)+0.5,
					yticklabels=names)
	ax.tick_params( axis='y', which='both', left='off', right='off', labelbottom='off')
	ax.pcolor(numpy.transpose(casesMatrix)[:,1:],cmap="Greys",edgecolors='black',linewidths=1,alpha=0.7)	
	ax.set_xlabel("Combinatorial patterns") 
	
	fig.subplots_adjust( wspace=1,hspace=0, left=0.3, right=0.975)	
	fig.savefig(prefix+".pvalue_"+str(pvalue)+".counts_bar.pdf")
	#################################################
	# Plot ratios bar plot
	# Create a figure.
	fig = pyplot.figure(figsize=(6, 6))
	gs = gridspec.GridSpec(2, 1, height_ratios=[3,1])
	
	# barplot
	ax = pyplot.subplot(gs[0])
	#ax = fig.add_subplot(211)
	ax.bar( numpy.array(range(len(ratios[1:])))+0.5, ratios[1:],align="center")
	ax.set_xlim(0, len(ratios[1:]))
	ax.grid(True)
	ax.tick_params( axis='x', which='both',	bottom='off', top='off', labelbottom='off')
	ax.set_ylabel("Enrichment of co-localized histone marks") 
	ax.text(0.5,0.9,"Enrichment of empty nucleosomes = "+str('%.2E' % ratios[0]),horizontalalignment='center',verticalalignment='center',transform=ax.transAxes) 

	# Axes for the heatmap lines.
	ax = pyplot.subplot(gs[1])
	#ax = fig.add_subplot(212,frame_on=True)
	ax.set_xticks([])
	pyplot.setp(ax,yticks=numpy.arange(0,8)+0.5,
					yticklabels=names)
	ax.tick_params( axis='y', which='both', left='off', right='off', labelbottom='off')
	ax.pcolor(numpy.transpose(casesMatrix)[:,1:],cmap="Greys",edgecolors='black',linewidths=1,alpha=0.7)	
	ax.set_xlabel("Combinatorial patterns") 
	
	fig.subplots_adjust( wspace=1,hspace=0, left=0.3, right=0.975)	
	fig.savefig(prefix+".pvalue_"+str(pvalue)+".ratios_bar.pdf")
	#################################################
	# Plot venn diagram for 2 sets
	if nFiles==2:
		A,B=names[0:2]
		ab,aB,Ab,AB=counts
		ab_r,aB_r,Ab_r,AB_r=ratios
		vmin=-max(abs(numpy.array(ratios)))*1.05
		vmax=max(abs(numpy.array(ratios)))*1.05
		
		gradient = numpy.linspace(0, 1, 256)
		gradient = numpy.vstack((gradient, gradient))
		colorbar=pyplot.imshow(gradient, aspect='auto', cmap=cm.bwr,vmin=vmin, vmax=vmax)

		norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)
		m = cm.ScalarMappable(norm=norm,cmap=cm.bwr)

		figure, axes = pyplot.subplots(1)
		v=venn2(subsets={'10': Ab, '01': aB, '11': AB}, set_labels = (A, B), ax=axes)
		venn2_circles(subsets={'10': Ab, '01': aB, '11': AB})

		axes.annotate(str(ab), xy=(0.05, 0.95), xycoords='axes fraction')
		figure.gca().set_axis_bgcolor(m.to_rgba(ab_r))
		figure.gca().set_axis_on()
		v.get_patch_by_id('10').set_alpha(1)
		v.get_patch_by_id('10').set_color(m.to_rgba(Ab_r))
		v.get_patch_by_id('11').set_alpha(1)
		v.get_patch_by_id('11').set_color(m.to_rgba(AB_r))
		v.get_patch_by_id('01').set_alpha(1)
		v.get_patch_by_id('01').set_color(m.to_rgba(aB_r))

		figure.colorbar(colorbar)
		axes.set_title(prefix)
		figure.savefig(prefix+".pvalue_"+str(pvalue)+".venn.svg")
################################################################
if __name__ == '__main__':
	main()
