#!/usr/bin/env python
import argparse, sys, HTSeq, numpy, pysam, matplotlib, itertools, scipy, nucChIP
matplotlib.use('Agg')
from matplotlib import pyplot
from scipy import stats
from scipy import signal
from scipy.signal import argrelmax
from scipy.cluster.vq import kmeans2
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.ticker import MultipleLocator
###########################################################
def getParser():
	parser = argparse.ArgumentParser(description='Generate normalized enrichment per nucleosome (signal counts per nucleosome divided by expected counts given a control).')
	parser.add_argument('-conf'   , type=str,   dest="confFile",help="STR. Name of configuration file.")
	parser.add_argument('-control'   , type=str,   dest="controlFile",help="STR. Name of BED file with the counts of the control (IgG or MNase).")
	parser.add_argument('-pvalue'   , type=float,   dest="pvalue",help="FLOAT. P-value to filter out nucleosomes from the the control. Default: 1", default=1)
	parser.add_argument('-expV'   , type=str,   dest="expVfile",help="STR. Name of TXT file with the expected values per count of control: control_counts TAB expected_value.")
	parser.add_argument('-hw'   , type=int,   dest="halfwinwidth",help="INT. Half window size. Default: 1000", default=1000)
	parser.add_argument('-db'   , type=str,   dest="database",help="STR. Name of database with the location of the regions of the genome to be plotted.")
	parser.add_argument('-plotNucs', type=str, dest="plotNucs",help="STR. Plot nucleosome positions: 'true' or 'false'. Default = 'false'.",default="false")
	parser.add_argument('-plotHM', type=str, dest="plotHM",help="STR. Plot heatmap: 'true' or 'false'. Default = 'false'.",default="false")
	parser.add_argument('-prefix'   , type=str,   dest="prefix",help="STR. Prefix for title of figures and name of output file.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
###########################################################
def main():
	args	  = getParser().parse_args()
	confFile  = args.confFile
	controlFile = args.controlFile
	pvalue    = args.pvalue
	expVfile  = args.expVfile # expected values file
	halfwinwidth = args.halfwinwidth
	database  = args.database
	plotNucs  = args.plotNucs
	plotHM    = args.plotHM
	prefix    = args.prefix

	# Extract expected values
	nLine=0
	expValues={}
	for line in open( expVfile,"r"):
		if nLine==0: # skips header line
			nLine += 1
			continue
		line = line.strip().split("\t")
		n,mu = float(line[0]), float(line[1])
		expValues[ n ] = mu

    # Set avrcov subplots
	avFig,avAx = pyplot.subplots(1)
	window = numpy.arange( -halfwinwidth, halfwinwidth )
	nfiles = 0
	for line in open(confFile,'r'): nfiles += 1
	color  = iter( matplotlib.cm.rainbow( numpy.linspace(0,1,nfiles) ) )
	cmap   = matplotlib.colors.LinearSegmentedColormap.from_list('my_colormap',['white','red'],256)

	hmFig,hmAx = pyplot.subplots(1,nfiles)
	hmFig.suptitle(prefix)
	# Create profiles for each count file
	for idx,line in enumerate(open(confFile,'r')):
		line        = line.strip().split('\t')
		signalFile  = line[0]
		regionsList = line[1]
		label       = line[2]

		regions = nucChIP.getRegions(regionsList,database,halfwinwidth)
		coverageMatrix = nucChIP.getNucCoverage(halfwinwidth,regions,signalFile,controlFile,pvalue,expValues)

		coverage = numpy.mean( coverageMatrix, axis=0 )
		sem = stats.sem( coverageMatrix, axis=0)
		c = next(color)
		
		avAx.plot(window,coverage,lw=0.9,label=label,color=c)
		avAx.fill_between(window, coverage+sem,coverage-sem,facecolor=c,alpha=0.5)

		if idx==0 and plotNucs=="true":
			# smooth coverage
			smooth=signal.savgol_filter(coverage, 147, 3)
			# plot smooth coverage
			avAx.plot(window,smooth,color='r',label="smoothed")
			# compute local maxima
			maxIdxs = argrelmax(smooth,order=50)[0]
			localMax = window[maxIdxs]
            # Saved positions to txt file
			out=open(prefix+'.localMax.txt','w')
			for val in localMax:
				#avAx.axvline(x=val,linewidth=2, color='r')
				lower=max(min(window),val-74)
				upper=min(max(window),val+74)
				avAx.axvspan(lower,upper,alpha=0.2,color=c)
				print >>out, val
			out.close()
		
		if plotHM=="true":

			nRows,nCols=coverageMatrix.shape
			cols = range(0,nCols,nCols/100)
			kclusters=8
			centroids, clusters = kmeans2(coverageMatrix[:,cols],kclusters,iter=100,thresh=1e-06)
			clustersSorted = numpy.argsort(clusters)
			upp_percen  = numpy.max( numpy.nanpercentile( coverageMatrix, 99, axis=0 ) )
			hm = hmAx[idx].imshow(coverageMatrix[clustersSorted,:],interpolation='gaussian', vmax=upp_percen,extent=[-halfwinwidth,halfwinwidth,8000,0])
			hmAx[idx].set_title(label)
			if idx==0: hmAx[idx].set_ylabel('Genes',fontsize=5)
			hmAx[idx].set_xlabel('Distance to TSS (5\' $\mapsto$ 3\')',fontsize=5)
			hmAx[idx].grid()
			hmAx[idx].axes.get_yaxis().set_visible(False)
			#hmAx[idx].axes.get_xaxis().set_visible(False)
			hmAx[idx].set_xticklabels([-1000,-500,0,500,1000],fontsize=5)
			# colorbar
			divider = make_axes_locatable(hmAx[idx])
			cax = divider.append_axes("right", size="20%", pad=0.05)
			cbar = pyplot.colorbar(hm, cax=cax, ticks=MultipleLocator(2), format="%.0f")

	fs=14
	avAx.set_title(prefix,fontsize=fs)
	avAx.legend(loc='upper left',fontsize=fs)
	avAx.set_xlabel('Genomic region (5\' $\mapsto$ 3\')',fontsize=fs)
	avAx.set_ylabel('Normalized read count',fontsize=fs)
	avAx.grid()
	avFig.savefig(prefix+".nuc_avrcov.svg")
	hmFig.savefig(prefix+".nuc_heatmap.svg")

################################################################
if __name__ == '__main__':
	main()
