#!/usr/bin/env python
import argparse, sys, pysam, HTSeq, numpy
import nucChIP
###########################################################
def getParser():
	parser = argparse.ArgumentParser(description='Count reads per nucleosome.')
	parser.add_argument('-b',type=str,dest="bFile",help="BAM or BED file. ChIP-seq reads.")
	parser.add_argument('-t',type=str,dest="fileType",help="STR. File type: bed or bam. Default: bam.", default="bam")
	parser.add_argument('-n',type=str,dest="nFile",help="BED file. Nucleosome position data, output of Danpos or iNPS.")
	parser.add_argument('-pValue',type=float,dest="pValue",help="FLOAT file. -log of pValue cut-off of nucleosomes on BED file.")
	parser.add_argument('-upper',type=int,dest="upper",help="INT. Upper threshold for insert size. Default: 200. Not used if fileType is bed", default=200)
	parser.add_argument('-lower',type=int,dest="lower",help="INT. Lower threshold for insert size. Default: 0. Not used if fileType is bed", default=0)
	parser.add_argument('-l',type=int,dest="lType",help="INT. Library type: if equal to 0, data is assumed to be paired-end and read lengths are estimated from data itself; if different from 0, data is assumed to be single-end and read lengths use this value extend every read. Not used if fileType is bed")
	parser.add_argument('-e',type=int,dest="exten",help="INT. Half length of reads extended at their midpoint.")
	parser.add_argument('-o',type=str,dest="oFile",help="STR. Name of output file.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
###########################################################
def main():
	args = getParser().parse_args()
	bName = args.bFile
	fileType = args.fileType
	nucFile = args.nFile
	pValue   = args.pValue
	upper    = args.upper
	lower    = args.lower
	libType  = args.lType
	extension  = args.exten
	oFile = args.oFile

	####################################################
	# Excecution

	print "Getting nucleosomes"
	nucl = nucChIP.getNucl(nucFile,pValue)
	avrLength = libType
	print "Counting reads per nucleosome"
	if fileType=="bed":
		counts = nucChIP.getCountsBed(nucl,bName,extension)
	else:
		counts = nucChIP.getCounts(avrLength,nucl,bName,extension,lower,upper)
	print "Saving results to output file"
	out = open(oFile,'w')
	for line in open(nucFile,'r'):
		fields=line.strip().split("\t")
		if len(fields)==1:
			continue
		elif not( fields[1].isdigit() ): # print header
			output = fields + [ "count" ]
			print >> out, "\t".join(map(str,output))
			continue 
		if float(fields[8])<pValue: continue
		nucID=fields[0]+"_"+str(fields[1])+"_"+str(fields[2])
		if nucID in counts: count = counts[nucID]
		else:               count = 0
		output = fields + [ str(count) ]
		print >> out, "\t".join(map(str,output))
	out.close()
################################################################
if __name__ == '__main__':
	main()
