#!/usr/bin/env python
import argparse, sys, HTSeq, numpy, pysam, matplotlib, itertools, nucChIP
matplotlib.use('Agg')
from matplotlib import pyplot
from scipy import stats
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib import gridspec

###########################################################
def getParser():
	parser = argparse.ArgumentParser(description='Generate coverage plots for alternatively spliced exons. It scales the dimensions, such that exons/introns of different lengths can be plotted together.')
	parser.add_argument('-c'   , type=str,   dest="confFile",help="STR. Name of configuration file.")
	parser.add_argument('-d'   , type=str,   dest="database",help="STR. Name of database with TSS info.")
	parser.add_argument('-w'   , type=int,   dest="wWidth",help="INT. Half width of plotting window.")
	parser.add_argument('-ns'   , type=int,   dest="numSamples",help="INT. Number of samples points for each exon/intron.")
	parser.add_argument('-lower'   , type=int,   dest="lower",help="INT. Lower insert size to be considered. Default: 0",default=0)
	parser.add_argument('-upper'   , type=int,   dest="upper",help="INT. Upper insert size to be considered. Deafult: 200", default=200)
	parser.add_argument('-perc', type=float, dest="perc",help="FLOAT. Percentile of top extreme values to be discarded.",default=0)
	parser.add_argument('-t'   , type=str,   dest="title",help="STR. Title of output figure.")
	parser.add_argument('-fs'  , type=int,   dest="fSize",help="INT. Font size.",default=12)
	parser.add_argument('-o'   , type=str,   dest="prefix",help="Prefix of output files.")

	if len(sys.argv) == 1:
		print >> sys.stderr,parser.print_help()
		exit(0)
	return parser
###########################################################
def main():
	args		 = getParser().parse_args()
	confFile	 = args.confFile
	database	 = args.database
	title		= args.title
	lowerSize		= args.lower
	upperSize		= args.upper
	fs		   = args.fSize
	perc		 = args.perc
	halfwinwidth = args.wWidth
	prefix	   = args.prefix
	numSamples = args.numSamples
	
	winwidth = 7*numSamples
	window = numpy.arange( winwidth ) 
	nfiles = 0
	for line in open(confFile,'r'): nfiles += 1
	color  = iter( matplotlib.cm.rainbow( numpy.linspace(0,1,nfiles) ) )	
	cmap   = matplotlib.colors.LinearSegmentedColormap.from_list('my_colormap',['white','red'],256)
	# Set avrcov subplots
	avFig,avAx = pyplot.subplots(1)
	# Set heatmap subplots
	htFig,htAx = pyplot.subplots(nfiles/ncols,ncols,sharex=True)
	if ncols == 1:
		idxs = range(nfiles)
	else:
		idxs = list(itertools.product(range(nfiles/ncols),range(ncols)))
	# Create profiles for each BAM file
	for idx,line in enumerate(open(confFile,'r')):
		line	 = line.strip().split('\t')
		bamFile  = line[0]
		exonList = line[1]
		label	= line[2]
		if len(line)>3: # if single-end, fragLength >0
			fragLength = int(line[3])
		else: # if paired-end, fragLength=0
			fragLength = 0
		# Regions on where to produce coverage plots
		regions, exons   = nucChIP.getExons(exonList, database, halfwinwidth )
		profileMatrix = nucChIP.getExonProfile(halfwinwidth,regions,exons,bamFile,fragLength,lowerSize,upperSize)
		# Cap extreme cases
		upp_percen		= numpy.percentile( profileMatrix, (100.00-float(perc)/2), axis=0 )
		low_percen		= numpy.percentile( profileMatrix, (float(perc)/2)       , axis=0 )
		profileMatrixConf = profileMatrix
		for row in range( profileMatrix.shape[0] ):
			cols_upp = (profileMatrix[row,:] > upp_percen )
			profileMatrixConf[ row, cols_upp ] = upp_percen[cols_upp]
			cols_low = (profileMatrix[row,:] < low_percen )
			profileMatrixConf[ row, cols_low ] = low_percen[cols_low]
		nRows, nCols	  = numpy.shape(profileMatrixConf)
		# Average coverage
		profile = numpy.mean( profileMatrixConf, axis=0)
		sem	 = stats.sem(  profileMatrixConf, axis=0)
		c	   = next(color)
		#pyplot.figure(1) # Average coverage plot
		avAx.plot(window, profile, lw=0.9, label=label, color=c)
		avAx.fill_between(window, profile+sem,profile-sem,facecolor=c,alpha=0.5)
	avAx.set_title(title,fontsize=fs)
	avAx.legend(loc='upper left',fontsize=fs)
	avAx.set_xlabel('Genomic region (5\' $\mapsto$ 3\')',fontsize=fs)
	avAx.set_ylabel('Read count Per Million mapped reads',fontsize=fs)
	avAx.grid()
	avFig.savefig(prefix+".avrcov.svg")
################################################################
if __name__ == '__main__':
	main()
